# DINOv3 ViT-Small Patch-8 Multi-View Training with S3 Streaming
# =================================================================
#
# This config uses S3 STREAMING to avoid downloading 3M images locally!
#
# Key Features:
# - Streams images directly from AWS S3 (no local storage needed)
# - Multi-view consistency learning (channel-invariant features)
# - LRU caching (keeps 1000 recent images in memory)
# - No AWS credentials needed (public bucket)
#
# Requirements:
#   pip install boto3 smart-open
#
# Saves: ~500GB of local storage!
# =================================================================

MODEL:
  META_ARCHITECTURE: SSLMetaArch
  DEVICE: cuda
  WEIGHTS: ''
  DTYPE: float32

compute_precision:
  param_dtype: bf16
  reduce_dtype: fp32
  sharding_strategy: SHARD_GRAD_OP

dino:
  loss_weight: 1.0
  global_ignore_diagonal: true
  head_n_prototypes: 65536
  head_bottleneck_dim: 256
  head_norm_last_layer: false
  head_nlayers: 3
  head_hidden_dim: 2048
  koleo_loss_weight: 0.1
  koleo_loss_distributed: false
  koleo_topk: 1
  koleo_distributed_replicas: 0
  koleo_distributed_loss_group_size: null
  koleo_distributed_loss_group_data: true
  force_weight_norm: false
  reweight_dino_local_loss: false

ibot:
  loss_weight: 1.0
  mask_sample_probability: 0.5
  mask_ratio_min_max:
    - 0.1
    - 0.5
  mask_random_circular_shift: false
  force_masking_even_with_zero_weight: false
  separate_head: true
  head_n_prototypes: 65536
  head_bottleneck_dim: 256
  head_norm_last_layer: false
  head_nlayers: 3
  head_hidden_dim: 2048

gram:
  use_loss: false
  compute_stats: false

# Training configuration - S3 STREAMING
train:
  batch_size_per_gpu: 80  # Increased to better utilize A100-80GB (was 40, only using 33GB/82GB)
  dataset_path: JUMPS3MultiView:bucket=cellpainting-gallery:prefix=cpg0000-jump-pilot/source_4/images
  output_dir: ../../DINOCell/checkpoints/dinov3_vits8_jump_s3_multiview
  saveckp_freq: 20
  seed: 42
  num_workers: 8  # More workers help with S3 streaming
  OFFICIAL_EPOCH_LENGTH: 1000
  monitor_gradient_norm: false
  chunk_schedule: []
  cache_dataset: false  # Don't cache (streaming from S3)
  use_teacher_head: true
  learn_from_teacher_tokens: false
  centering: sinkhorn_knopp
  checkpointing: false
  compile: true
  cudagraphs: false
  use_multichannel_augmentation: true  # Multi-view mode

student:
  arch: vit_small
  patch_size: 8
  drop_path_rate: 0.1
  layerscale: 1.0e-05
  pretrained_weights: '../../../dinov3/checkpoints/dinov3_vits16_pretrain_lvd1689m-08c60483.pth'
  ffn_layer: mlp
  ffn_ratio: 4.0
  resume_from_teacher_chkpt: ''
  qkv_bias: true
  proj_bias: true
  ffn_bias: true
  norm_layer: layernorm
  n_storage_tokens: 4
  mask_k_bias: true
  in_chans: 3
  pos_embed_type: rope
  pos_embed_rope_base: 100.0
  pos_embed_rope_min_period: null
  pos_embed_rope_max_period: null
  pos_embed_rope_normalize_coords: separate
  pos_embed_rope_shift_coords: null
  pos_embed_rope_jitter_coords: null
  pos_embed_rope_rescale_coords: null
  pos_embed_rope_dtype: bf16
  fp8_enabled: False

teacher:
  momentum_teacher: 0.996
  final_momentum_teacher: 1.0
  warmup_teacher_temp: 0.04
  teacher_temp: 0.07
  warmup_teacher_temp_epochs: 10
  in_chans: 3

distillation:
  enabled: false
  full_cfg_path: ''
  checkpoint_path: ''

multidistillation:
  enabled: false

hrft:
  enabled: false
  checkpoint_path: ''

optim:
  epochs: 90
  optimizer: adamw
  weight_decay: 0.04
  weight_decay_end: 0.2
  lr: 5.0e-5  # 1/10 of original
  warmup_epochs: 10
  min_lr: 1.0e-06
  schedule_trunc_extra: 0.0
  clip_grad: 3.0
  freeze_last_layer_epochs: 1
  scaling_rule: sqrt_wrt_1024
  patch_embed_lr_mult: 0.2
  dino_head_wd_multiplier: 1.0
  layerwise_decay: 0.9
  multi_tensor_optim: true
  dump_fsdp_weights_path: ''
  adamw_beta1: 0.9
  adamw_beta2: 0.999

crops:
  global_crops_scale:
    - 0.4
    - 1.0
  local_crops_number: 8
  local_crops_scale:
    - 0.05
    - 0.4
  global_crops_size: 224
  local_crops_size: 96
  global_local_crop_pairs_ratios: 1.0
  gram_teacher_crops_size: null
  localcrops_subset_of_globalcrops: false
  share_color_jitter: false
  horizontal_flips: true
  gram_teacher_no_distortions: false
  num_channels: 5
  channel_selection_mode: random
  rgb_mean:
    - 0.485
    - 0.456
    - 0.406
  rgb_std:
    - 0.229
    - 0.224
    - 0.225

# S3-specific settings
s3:
  cache_size: 1000  # Number of images to cache in memory
  num_workers: 8  # Parallel S3 downloads
  prefetch_factor: 2  # Prefetch batches

# Wandb logging configuration
wandb:
  enabled: true  # Enable wandb logging
  project: dinocell-pretraining  # Wandb project name
  name: vits8_jump_multiview_s3  # Run name
  entity: null  # Your wandb username (or null for default)
  log_interval: 1  # Log every iteration (so losses appear as charts in wandb immediately)
  log_attention_maps: true  # Log attention visualizations
  attention_log_interval: 100  # Log attention every 100 iterations (to avoid too many images)
  save_checkpoints_to_wandb: false  # Upload checkpoints (large files)

evaluation:
  eval_period_iterations: 5000
  low_freq_every: 5
  config_files:
    high_freq: benchmark_high_frequency.yaml
    low_freq: benchmark_low_frequency.yaml

checkpointing:
  period: 2500
  max_to_keep: 3
  keep_every: 99999999999999999

